continue
params[:place][:place_images_images].nil?
params[:place][:place_images_images].present?
params[:place][:place_images_images].exist?
!params[:place][:place_images_images]
params[:place][:place_images_images]
params
continue
params
continue
params.each{|n| p n}
params
continue
params[:place][:place_images_images].each{|n| p n}
params[:place][:place_images_images]
continue
a == [nil]
a == [nil:
a = [nil]
a = [nil
[nil].blank?
[nil].nil?
@next_spots
@next_spots != [nil]
s
continue
@next_spots.blank?
@next_spots.nil?
@next_spots
@next_spots == nil
@next_spots != nil
@next_spots != [nil]
s
continue
@next_spots != [nil]
@next_spots
s
continue
@next_spots.nil?
@next_spots
continue
@route.spot_place_nil?
continue
image
continue
params[:place][:place_images_images]
[params[:place][:place_images_images]]
params
continue
spot_1
continue
spot_1
continue
route
:spot_1
spot_1
continue
@route.spots
route.spots
Spot.all
Spot.last
@route.spots.pluck(:place_id).blank?
@route.spots.pluck(:place_id).nil?
@route.spots.pluck(:place_id)
@route.spots.pluck(:place_id).include?(nil)
@route
continue
params
continue
params
continue
[params[:place][:place_images_images]]
continue
n
s
image
s
params
continue
params[:place][:place_images_images]
continue
params[:place][:place_images_images]
continue
params[:place][:place_images_images]
place_params[:place_images_images]
params
n
continue
params[:place][:place_images_images]
params
place_params
params
continue
params
place_params
continue
place_params[:place_images_images]
place_params_without_images
place_params
params
continue
user
place
params
continue
current_user
session
session[:user_id]
session[:name]
continue
session[:user_id]
session
n
s
session[:name]
session
continue
flash[:alert]
flase[:alert]
response.first
response[2]
response[1]
response[0]
response.alert
response
responce
response.body
continue
response.status
response
responce
another_user
continue
sign_in user 
user.name
let(:user) { create(:user) }
another_user
:user
:suer
user
continue
User.last
user
continue
User.last
user
continue
user.email
user_cd.email
user_cd
continue
user_2.errors[:email]
user_2.valid?
user_2.save
user_2.email = 'dupli_test@test.com'
user
continue
user_2
user
continue
place
continue
is_expected.to raise_error(MyError)
continue
is_expected.to
continue
place.errors[:name]
continue
place.errors[:name]
place.valid?
place
continue
place
genre
continue
genre
continue
genre
place.errors
place.valid?
place.errors
place.
continue
Genre.all
genre
continue
Place.all
Genre.all
Genre.find(1)
Genre.find(1
place.genre_id
place.genre
place.errors
place.valid?
place
continue
@place.errors
@place.valid?
n
s
continue
expect(@place).to
is_expected.to
is_expected
continue
is_expected.to eq false
@place.valid?
@place
continue
place_array.uniq!
continue
@places
n
place_array
continue
@places
n
Tag.where(name: a).first.place
Tag.where(name: a).first
Tag.where(name: a)
a = tags.first
tags
continue
@places
continue
Vision.search_image_data(image_search_params[:image])
continue
Base64.encode64(image_search_params[:image].tempfile.read)
Base64.encode64(image_search_params[:image].tempfile)
image_search_params[:image].tempfile
image_search_params[:image]/tempfile
Vision.search_image_data(image_search_params[:image])
continue
Vision.search_image_data(image_search_params[:image])
image_search_params[:image].tempfile
image_search_params
image_search_params.tempfile
params[:place_image][:image].tempfile
params[:place_image][:image]
parmas[:place_image][:image]
params[:image]
Vision.get_image_data(image_search_params.image)
Vision.get_image_data(image_search_params)
image_search_params
continue
JSON.parse(response.body)
response.body
response
continue
PlaceImage.image_search(params[:place_image][:image])
params
continue
 PlaceImage.image_search(params[:image_search])
continue
Vision.search_image_data("5.jpg")
params
