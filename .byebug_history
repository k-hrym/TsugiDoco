continue
place_array.uniq!
continue
@places
n
place_array
continue
@places
n
Tag.where(name: a).first.place
Tag.where(name: a).first
Tag.where(name: a)
a = tags.first
tags
continue
@places
continue
Vision.search_image_data(image_search_params[:image])
continue
Base64.encode64(image_search_params[:image].tempfile.read)
Base64.encode64(image_search_params[:image].tempfile)
image_search_params[:image].tempfile
image_search_params[:image]/tempfile
Vision.search_image_data(image_search_params[:image])
continue
Vision.search_image_data(image_search_params[:image])
image_search_params[:image].tempfile
image_search_params
image_search_params.tempfile
params[:place_image][:image].tempfile
params[:place_image][:image]
parmas[:place_image][:image]
params[:image]
Vision.get_image_data(image_search_params.image)
Vision.get_image_data(image_search_params)
image_search_params
continue
JSON.parse(response.body)
response.body
response
continue
PlaceImage.image_search(params[:place_image][:image])
params
continue
 PlaceImage.image_search(params[:image_search])
continue
Vision.search_image_data("5.jpg")
params
Vision.search_image_data(params[:image_search])
params[:image_search]
params[:image_search].image_search
params
continue
params
params[:image_search]
params = {requests: [{image: {content: params[:image_search]},features: [{type: 'LABEL_DETECTION'}]}]}.to_json
params = {requests: [{image: {content: image_file},features: [{type: 'LABEL_DETECTION'}]}]}.to_json
Vision.search_image_data(params[:image_search])
Vision.get_image_data(params[:image_search])
Vision.search_image_data(params[:image_search])
params[:image_search].image_search
continue
a.image.read
a = PlaceImage.last
Base64.encode64('5.jpg')
File.open("5.jpg",?r)
File.open( params[:image_search],?r)
params[:image_search]
continue
JSON.parse(response.body)['responses'][0]['labelAnnotations']
JSON.parse(response.body)['responses'][0]['labelAnnotations'].pluck('description').take(3)
response = https.request(request, params)
request['Content-Type'] = 'application/json'
request = Net::HTTP::Post.new(uri.request_uri)
https.use_ssl = true
https = Net::HTTP.new(uri.host, uri.port)
uri = URI.parse(api_url)
api_url = "https://vision.googleapis.com/v1/images:annotate?key=#{ENV['GOOGLE_VISION_API_KEY']}"
params
params = {requests: [{image: {content: base64_image},features: [{type: 'LABEL_DETECTION'}]}]}.to_json
base64_image = Base64.encode64(params[:image_search])
base64_image
tags = Vision.search_image_data(params[:image_search])
params[:image_search].image_search
continue
      JSON.parse(response.body)['responses'][0]['labelAnnotations'].pluck('description').take(3)
      # APIレスポンス出力
      response = https.request(request, params)
      request['Content-Type'] = 'application/json'
      request = Net::HTTP::Post.new(uri.request_uri)
      https.use_ssl = true
      https = Net::HTTP.new(uri.host, uri.port)
      uri = URI.parse(api_url)
      # Google Cloud Vision APIにリクエスト
      }.to_json
        }]
          ]
            }
              type: 'LABEL_DETECTION'
            {
          features: [
          },
            content: base64_image
          image: {
        requests: [{
      params = {
base64_image = Base64.encode64(params[:image_search])
base64_image = Base64.encode64(params[:image_search].read)
tags = Vision.get_image_data(params[:image_search])
@places = params[:image_search].image_search
=>  9:     @places = params[:image_search].image_search
continue
params[:image_search].image_search
params[:image_search]
params
continue
@places
continue
n
s
params
s
a
image_file
s
Vision.get_image_data(place_image)
place_image
continue
n
continue
@place.errors
@place.save
@place.genre_id = params[:place][:genre_id]
params[:place][:genre_id]
place_params
@place.errors
@place.save
@place
@place.place_images.map{|pi| pi.user = current_user}
n
s
continue
a.errors
a.save
a.password = "333333"
a.email = "third@gmail.com"
a.name = "third-user"
a = User.new
continue
n
continue
image.image_id
image
n
image
continue
n
continue
places.blank?
places
n
continue
@places.blank?
@places
continue
@user.followers.exists?
@user.followers.exist?
@user.followers.blank?
@user.followers.present?
@user.followers
n
continue
spots.reload
spots
n
spots.count
spots
continue
@route.spots
continue
@route.spots
continue
@route.spots
continue
@route.spots
continue
spot
n
spot
n
spot
n
spot
sopt
n
spot
continue
@route.spots
n
continue
@route.spots
continue
@route.spots
continue
@route.spots
continue
@route.spots
continue
@route.spots
continue
@route.spots.pluck(:order)
@route.spots.blank?
continue
s
rsi.update(route_spot_params(rsi.id))
continue
n
s
continue
rsi.update(route_spot_params(rsi.id))
rsi
route_spot_params(rsi.id)
continue
rsi.errors
rsi.update(route_spot_params(rsi.id))
rsi
continue
rsi
rsi.update(route_spot_params(rsi.id))
continue
@route.save
continue
@route.errors
@route.save
@route
continue
!!!
continue
@routes.blank?
@routes
n
continue
search.blank?
continue
places
continue
routes
a.blank?
return nil unless a.blank?
a = nil
return nil unless search.blank?
search
places
continue
return nil unless search.blank?
search.blank?
