continue
current_user.wishing?
current_user
n
continue
Like.liked(route,current_user).blank?
Like.liked(route,current_user).nil?
Like.liked(route,current_user)
n
continue
Like.liked(route,current_user).nil?
Like.liked(route,current_user)
n
continue
@user.errors
@user.update(is_valid: false)
@user.is_valid.blank?
@user.is_valid
@user
@user.errors
n
edit_valid
continue
self.spots.first.place.place_images.first
self.spots.first.place.place_images
self.spots.first.place
self.spots.first
self.spots
self
n
route.spots.first.place.place_images
route.spots.first.place
route.spots.first
route.spots
route
n
continue
route
continue
 user_signed_in?
authenticate_user!
authenticate_user
authenticate_suer
current_user
n
b
n
s
continue
@route.spots.pluck(:place_id)
@route.spots.pluck(:place_id)0
@route.spots
continue
@route.spots.pluck(:place_id)
@route.spots
continue
n
s
@route.spots.pluck(:place_id).include?(nil)
@route.spots.pluck(:place_id)
continue
n
s
@route.spots.pluck(:place_id).include?(nil)
continue
@route.spots.pluck(:place_id).include?(nil)
@route.spots.pluck(:place_id).include(nil)?
@route.spots.pluck(:place_id)
@route.spots
@route
continue
rsi.place.nil?
rsi
continue
rsi
continue
rsi
continue
rsi
continue
rsi
continue
s
rsi.place
rsi
continue
rsi
continue
!!!
continue
s
spot.place
spot
n
continue
n
continue
n
continue
n
s
continue
@route.spots
@route.spots.order_update
@spot
continue
@routes.first.spots.first.place.place_images.first
@routes.first.spots.first.place.place_images
@routes.first.spots.first.place
@routes.first.spots.first
@routes.first.spots
@routes.first.title
@routes.first.titel
@routes.first
@routes
@routes = Route.released
continue
Route.where(status: true)
@routes
route
continue
params[:route_id]
params
continue
n
s
continue
  end
    params.require(:spots).require(spot_id.to_s).permit(:place_id,:memo)
def route_spot_params(spot_id)
    route_spot_ids = @route.spots.pluck(:id)
params.require(:spots).require(2).permit(:place_id,:memo)
params.require(:spots).require(:2).permit(:place_id,:memo)
params.require(:spots).require("2").permit(:place_id,:memo)
params.require(:spots).require("2").permit(:place)
params.require(:spots).require("2")
params.require(:spots).require(2)
params.require(:spots).permit(2)
params.require(:spots).permit(:2)
params.require(:spots).permit("2")
params.require(:spots).("2")
params.require(:spots)("2")
params.require(:spots)("2)
params.require(:spots,"2")
params.require(:spots)
params[:spots]["2"]
@route.spots.pluck(:id)
@route.spots.id
@route.spots
@route.errors
@route.update(params[:spots])
params[:spot]
@route.update
@route.update_all
@route = Route.find(params[:id])
@route
params[:id]
continue
params[:route][:id]
params[:id]
params(:id)
@route
route
continue
@route
continue
params[:spots].route
params[:spots]["2"][:place][:name]
params[:spots]["2"][:place]
params[:spots][:2][:place]
params[:spots]["2"][:place]
params[:spots]["2"]
params[:spots][2]
params[:spots].first
params[:spots](1)
params[:spots][1]
params[:spots][0]
params[:spots][:place]
params[:spots]
params
continue
n
continue
places
continue
req
resp
respond_to
respond
params[:keyword]
continue
!!!
continue
spot.place
f
place.name
place[1]
place[0]
place
n
continue
@route.spots.order_update(@route.spots)
continue
@route.spots.order_update
continue
    order_update(@route.spots)
continue
places
placs
n
continue
places.to_json
render json: places.to_json
places
n
params[:term]
continue
f
spot
form
@route
n
@route
form
continue
f.object.place
f.place
spot
f.object
f
n
continue
f.object
f
n
spot
n
route.spots
spot
continuespot
continue
route.spots[1]
route.spots.each do |spot|
spot
n
route.spots
spot
continue
f
continue
f.object
f
@route
continue
:spots
f
