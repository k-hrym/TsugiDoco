continue
@place.errors
@place.save
@place.genre_id = params[:place][:genre_id]
params[:place][:genre_id]
place_params
@place.errors
@place.save
@place
@place.place_images.map{|pi| pi.user = current_user}
n
s
continue
a.errors
a.save
a.password = "333333"
a.email = "third@gmail.com"
a.name = "third-user"
a = User.new
continue
n
continue
image.image_id
image
n
image
continue
n
continue
places.blank?
places
n
continue
@places.blank?
@places
continue
@user.followers.exists?
@user.followers.exist?
@user.followers.blank?
@user.followers.present?
@user.followers
n
continue
spots.reload
spots
n
spots.count
spots
continue
@route.spots
continue
@route.spots
continue
@route.spots
continue
@route.spots
continue
spot
n
spot
n
spot
n
spot
sopt
n
spot
continue
@route.spots
n
continue
@route.spots
continue
@route.spots
continue
@route.spots
continue
@route.spots
continue
@route.spots
continue
@route.spots.pluck(:order)
@route.spots.blank?
continue
s
rsi.update(route_spot_params(rsi.id))
continue
n
s
continue
rsi.update(route_spot_params(rsi.id))
rsi
route_spot_params(rsi.id)
continue
rsi.errors
rsi.update(route_spot_params(rsi.id))
rsi
continue
rsi
rsi.update(route_spot_params(rsi.id))
continue
@route.save
continue
@route.errors
@route.save
@route
continue
!!!
continue
@routes.blank?
@routes
n
continue
search.blank?
continue
places
continue
routes
a.blank?
return nil unless a.blank?
a = nil
return nil unless search.blank?
search
places
continue
return nil unless search.blank?
search.blank?
search.blank??
search.nil?
puts 'hello' if search 
search.present?
search.exists?
search
continue
places
continue
@routes
n
continue
@routes
n
continue
@routes
n
continue
@places.blank?
@places.exists?
@places.exist?
@places.nil?
@places
n
continue
(routes + place_to_routes).flatten.map{|route|route if route.status == true}
(routes + place_to_routes).flatten.map{|route|route.status == true}
(routes + place_to_routes).flatten[2]
(routes + place_to_routes).flatten[1]
(routes + place_to_routes).flatten[0]
(routes + place_to_routes).released
routes
Route.all
(routes + place_to_routes).flatten.where(user_id: 2)
(routes + place_to_routes).flatten[0]
(routes + place_to_routes).flatten
(routes + place_to_routes)
place_to_routes[0]
place_to_routes
continue
place_to_routes
continue
(routes << place_to_routes)
(routes + place_to_routes).flatten.where(
(routes + place_to_routes).flatten
routes + place_to_routes
routes.released
place_to_routes
routes
continue
@routes
@places
continue
@spot.id
console.log("<%=@spot.id%>"
console.log("#{@spot.id}"
console.log("@spot.id"
@spot
n
continue
n
@number
@spot
continue
@places
continue
@places
@palces
continue
@next_spots && @next_spots != [nil]
@next_spots != [nil]
@next_spots
n
continue
@next_spots
@route_spots
continue
route_spots.find_by(order: spot.order + 1)
continue
route_spots.find_by(order: spot.order + 1)
route_spots.find_by(order: spot.order+1)
route_spots.find_by(order: spot.order +1)
route_spots
