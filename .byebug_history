continue
current_user
session
session[:user_id]
session[:name]
continue
session[:user_id]
session
n
s
session[:name]
session
continue
flash[:alert]
flase[:alert]
response.first
response[2]
response[1]
response[0]
response.alert
response
responce
response.body
continue
response.status
response
responce
another_user
continue
sign_in user 
user.name
let(:user) { create(:user) }
another_user
:user
:suer
user
continue
User.last
user
continue
User.last
user
continue
user.email
user_cd.email
user_cd
continue
user_2.errors[:email]
user_2.valid?
user_2.save
user_2.email = 'dupli_test@test.com'
user
continue
user_2
user
continue
place
continue
is_expected.to raise_error(MyError)
continue
is_expected.to
continue
place.errors[:name]
continue
place.errors[:name]
place.valid?
place
continue
place
genre
continue
genre
continue
genre
place.errors
place.valid?
place.errors
place.
continue
Genre.all
genre
continue
Place.all
Genre.all
Genre.find(1)
Genre.find(1
place.genre_id
place.genre
place.errors
place.valid?
place
continue
@place.errors
@place.valid?
n
s
continue
expect(@place).to
is_expected.to
is_expected
continue
is_expected.to eq false
@place.valid?
@place
continue
place_array.uniq!
continue
@places
n
place_array
continue
@places
n
Tag.where(name: a).first.place
Tag.where(name: a).first
Tag.where(name: a)
a = tags.first
tags
continue
@places
continue
Vision.search_image_data(image_search_params[:image])
continue
Base64.encode64(image_search_params[:image].tempfile.read)
Base64.encode64(image_search_params[:image].tempfile)
image_search_params[:image].tempfile
image_search_params[:image]/tempfile
Vision.search_image_data(image_search_params[:image])
continue
Vision.search_image_data(image_search_params[:image])
image_search_params[:image].tempfile
image_search_params
image_search_params.tempfile
params[:place_image][:image].tempfile
params[:place_image][:image]
parmas[:place_image][:image]
params[:image]
Vision.get_image_data(image_search_params.image)
Vision.get_image_data(image_search_params)
image_search_params
continue
JSON.parse(response.body)
response.body
response
continue
PlaceImage.image_search(params[:place_image][:image])
params
continue
 PlaceImage.image_search(params[:image_search])
continue
Vision.search_image_data("5.jpg")
params
Vision.search_image_data(params[:image_search])
params[:image_search]
params[:image_search].image_search
params
continue
params
params[:image_search]
params = {requests: [{image: {content: params[:image_search]},features: [{type: 'LABEL_DETECTION'}]}]}.to_json
params = {requests: [{image: {content: image_file},features: [{type: 'LABEL_DETECTION'}]}]}.to_json
Vision.search_image_data(params[:image_search])
Vision.get_image_data(params[:image_search])
Vision.search_image_data(params[:image_search])
params[:image_search].image_search
continue
a.image.read
a = PlaceImage.last
Base64.encode64('5.jpg')
File.open("5.jpg",?r)
File.open( params[:image_search],?r)
params[:image_search]
continue
JSON.parse(response.body)['responses'][0]['labelAnnotations']
JSON.parse(response.body)['responses'][0]['labelAnnotations'].pluck('description').take(3)
response = https.request(request, params)
request['Content-Type'] = 'application/json'
request = Net::HTTP::Post.new(uri.request_uri)
https.use_ssl = true
https = Net::HTTP.new(uri.host, uri.port)
uri = URI.parse(api_url)
api_url = "https://vision.googleapis.com/v1/images:annotate?key=#{ENV['GOOGLE_VISION_API_KEY']}"
params
params = {requests: [{image: {content: base64_image},features: [{type: 'LABEL_DETECTION'}]}]}.to_json
base64_image = Base64.encode64(params[:image_search])
base64_image
tags = Vision.search_image_data(params[:image_search])
params[:image_search].image_search
continue
      JSON.parse(response.body)['responses'][0]['labelAnnotations'].pluck('description').take(3)
      # APIレスポンス出力
      response = https.request(request, params)
      request['Content-Type'] = 'application/json'
      request = Net::HTTP::Post.new(uri.request_uri)
      https.use_ssl = true
      https = Net::HTTP.new(uri.host, uri.port)
      uri = URI.parse(api_url)
      # Google Cloud Vision APIにリクエスト
      }.to_json
        }]
          ]
            }
              type: 'LABEL_DETECTION'
            {
          features: [
          },
            content: base64_image
          image: {
        requests: [{
      params = {
base64_image = Base64.encode64(params[:image_search])
base64_image = Base64.encode64(params[:image_search].read)
tags = Vision.get_image_data(params[:image_search])
@places = params[:image_search].image_search
=>  9:     @places = params[:image_search].image_search
continue
params[:image_search].image_search
params[:image_search]
params
continue
@places
continue
n
s
params
s
a
image_file
s
Vision.get_image_data(place_image)
place_image
continue
n
continue
@place.errors
@place.save
@place.genre_id = params[:place][:genre_id]
params[:place][:genre_id]
place_params
@place.errors
@place.save
@place
@place.place_images.map{|pi| pi.user = current_user}
n
s
continue
a.errors
a.save
a.password = "333333"
a.email = "third@gmail.com"
a.name = "third-user"
a = User.new
continue
n
continue
image.image_id
